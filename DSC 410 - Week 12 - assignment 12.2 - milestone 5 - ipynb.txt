{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1b5ad7dc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x14d9e7e3c90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import dash\n",
    "from dash import html, dcc\n",
    "from dash.dependencies import Input, Output, State\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "data = pd.read_csv(\"C:\\\\Users\\\\lexiw\\\\OneDrive\\\\Desktop\\\\DSC 410\\\\churn-bigml-80.csv\")\n",
    "\n",
    "# Needed to one hot encode the states for the model to work\n",
    "data = pd.get_dummies(data, columns=['State', 'International plan', 'Voice mail plan'], drop_first=False)\n",
    "\n",
    "# Split for target and features; and training /testing set\n",
    "X = data.drop(columns=['Churn'])\n",
    "y = data['Churn'].astype(int)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Model training\n",
    "model = RandomForestClassifier(max_depth=20, n_estimators=200, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Dash start/ layout/ dropdown better than text typing, text typing was giving formatting errors\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Customer Churn Prediction\"),\n",
    "    dcc.Dropdown(\n",
    "        id='input-state',\n",
    "        options=[{'label': i.split('_')[-1], 'value': i} for i in X.columns if i.startswith('State_')],\n",
    "        placeholder='Select a state',\n",
    "    ),\n",
    "    dcc.Dropdown(\n",
    "        id='input-international-plan',\n",
    "        options=[\n",
    "            {'label': 'Yes', 'value': 'International plan_Yes'},\n",
    "            {'label': 'No', 'value': 'International plan_No'}\n",
    "        ],\n",
    "        placeholder='International Plan'\n",
    "    ),\n",
    "    dcc.Dropdown(\n",
    "        id='input-voice-mail-plan',\n",
    "        options=[\n",
    "            {'label': 'Yes', 'value': 'Voice mail plan_Yes'},\n",
    "            {'label': 'No', 'value': 'Voice mail plan_No'}\n",
    "        ],\n",
    "        placeholder='Voice Mail Plan'\n",
    "    ),\n",
    "    html.Button('Predict Churn', id='predict-button', n_clicks=0),\n",
    "    html.Div(id='prediction-output')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output('prediction-output', 'children'),\n",
    "    Input('predict-button', 'n_clicks'),\n",
    "    [State('input-state', 'value'),\n",
    "     State('input-international-plan', 'value'),\n",
    "     State('input-voice-mail-plan', 'value')]\n",
    ")\n",
    "def update_output(n_clicks, state, international_plan, voice_mail_plan):\n",
    "    if n_clicks > 0:\n",
    "        try:\n",
    "            # Preparing for input for predictions, and making predictions\n",
    "            input_data = {col: [0] for col in X_train.columns}\n",
    "            if state:\n",
    "                input_data[state] = [1]\n",
    "            if international_plan:\n",
    "                input_data[international_plan] = [1]\n",
    "            if voice_mail_plan:\n",
    "                input_data[voice_mail_plan] = [1]\n",
    "            \n",
    "            input_df = pd.DataFrame(input_data)\n",
    "\n",
    "            prediction = model.predict(input_df)\n",
    "            return f'Prediction: {\"Churn Possibility High\" if prediction[0] == 1 else \"Churn Possibility Low\"}'\n",
    "        except Exception as e:\n",
    "            return f'Error processing input: {str(e)}'\n",
    "    return 'Enter values and click predict.'\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f327475f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

